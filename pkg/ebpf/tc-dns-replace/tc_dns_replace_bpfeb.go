// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package tc_dns_replace

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type tc_dns_replaceA_record struct {
	_      structs.HostLayout
	IpAddr uint32
	Ttl    uint32
}

type tc_dns_replaceDnsEvent struct {
	_         structs.HostLayout
	Ts        uint64
	R_type    uint16
	IsMatched uint8
	Name      [256]int8
	_         [5]byte
}

type tc_dns_replaceDnsHeap struct {
	_         structs.HostLayout
	DnsBuffer [512]int8
}

type tc_dns_replaceDnsQuestion struct {
	_          structs.HostLayout
	Name       [256]uint8
	RecordType uint16
	Class      uint16
}

// loadTc_dns_replace returns the embedded CollectionSpec for tc_dns_replace.
func loadTc_dns_replace() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Tc_dns_replaceBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tc_dns_replace: %w", err)
	}

	return spec, err
}

// loadTc_dns_replaceObjects loads tc_dns_replace and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*tc_dns_replaceObjects
//	*tc_dns_replacePrograms
//	*tc_dns_replaceMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTc_dns_replaceObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTc_dns_replace()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tc_dns_replaceSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tc_dns_replaceSpecs struct {
	tc_dns_replaceProgramSpecs
	tc_dns_replaceMapSpecs
	tc_dns_replaceVariableSpecs
}

// tc_dns_replaceProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tc_dns_replaceProgramSpecs struct {
	TcDnsEgress  *ebpf.ProgramSpec `ebpf:"tc_dns_egress"`
	TcDnsIngress *ebpf.ProgramSpec `ebpf:"tc_dns_ingress"`
}

// tc_dns_replaceMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tc_dns_replaceMapSpecs struct {
	DnsA_records     *ebpf.MapSpec `ebpf:"dns_a_records"`
	DnsCaptureEvents *ebpf.MapSpec `ebpf:"dns_capture_events"`
	Eventheap        *ebpf.MapSpec `ebpf:"eventheap"`
	Heap             *ebpf.MapSpec `ebpf:"heap"`
}

// tc_dns_replaceVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tc_dns_replaceVariableSpecs struct {
}

// tc_dns_replaceObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTc_dns_replaceObjects or ebpf.CollectionSpec.LoadAndAssign.
type tc_dns_replaceObjects struct {
	tc_dns_replacePrograms
	tc_dns_replaceMaps
	tc_dns_replaceVariables
}

func (o *tc_dns_replaceObjects) Close() error {
	return _Tc_dns_replaceClose(
		&o.tc_dns_replacePrograms,
		&o.tc_dns_replaceMaps,
	)
}

// tc_dns_replaceMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTc_dns_replaceObjects or ebpf.CollectionSpec.LoadAndAssign.
type tc_dns_replaceMaps struct {
	DnsA_records     *ebpf.Map `ebpf:"dns_a_records"`
	DnsCaptureEvents *ebpf.Map `ebpf:"dns_capture_events"`
	Eventheap        *ebpf.Map `ebpf:"eventheap"`
	Heap             *ebpf.Map `ebpf:"heap"`
}

func (m *tc_dns_replaceMaps) Close() error {
	return _Tc_dns_replaceClose(
		m.DnsA_records,
		m.DnsCaptureEvents,
		m.Eventheap,
		m.Heap,
	)
}

// tc_dns_replaceVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadTc_dns_replaceObjects or ebpf.CollectionSpec.LoadAndAssign.
type tc_dns_replaceVariables struct {
}

// tc_dns_replacePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTc_dns_replaceObjects or ebpf.CollectionSpec.LoadAndAssign.
type tc_dns_replacePrograms struct {
	TcDnsEgress  *ebpf.Program `ebpf:"tc_dns_egress"`
	TcDnsIngress *ebpf.Program `ebpf:"tc_dns_ingress"`
}

func (p *tc_dns_replacePrograms) Close() error {
	return _Tc_dns_replaceClose(
		p.TcDnsEgress,
		p.TcDnsIngress,
	)
}

func _Tc_dns_replaceClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tc_dns_replace_bpfeb.o
var _Tc_dns_replaceBytes []byte
