// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package tc_dns_parse

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type xdp_dns_parseCacheRecord struct {
	_   structs.HostLayout
	Ip  [4]uint32
	Ttl [4]uint32
}

type xdp_dns_parseDnsPeer struct {
	_   structs.HostLayout
	Dq  xdp_dns_parseDnsQuestion
	Ip  [4]uint32
	Ttl [4]uint32
}

type xdp_dns_parseDnsQuestion struct {
	_          structs.HostLayout
	Name       [256]uint8
	RecordType uint16
	Class      uint16
}

// loadXdp_dns_parse returns the embedded CollectionSpec for xdp_dns_parse.
func loadXdp_dns_parse() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Xdp_dns_parseBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load xdp_dns_parse: %w", err)
	}

	return spec, err
}

// loadXdp_dns_parseObjects loads xdp_dns_parse and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*xdp_dns_parseObjects
//	*xdp_dns_parsePrograms
//	*xdp_dns_parseMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadXdp_dns_parseObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadXdp_dns_parse()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// xdp_dns_parseSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_dns_parseSpecs struct {
	xdp_dns_parseProgramSpecs
	xdp_dns_parseMapSpecs
	xdp_dns_parseVariableSpecs
}

// xdp_dns_parseProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_dns_parseProgramSpecs struct {
	XdpParseDnsA *ebpf.ProgramSpec `ebpf:"xdp_parse_dns_a"`
}

// xdp_dns_parseMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_dns_parseMapSpecs struct {
	DnsA_cache *ebpf.MapSpec `ebpf:"dns_a_cache"`
	Events     *ebpf.MapSpec `ebpf:"events"`
	IpTtl      *ebpf.MapSpec `ebpf:"ip_ttl"`
}

// xdp_dns_parseVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_dns_parseVariableSpecs struct {
	*ebpf.VariableSpec `ebpf:"_"`
}

// xdp_dns_parseObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadXdp_dns_parseObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_dns_parseObjects struct {
	xdp_dns_parsePrograms
	xdp_dns_parseMaps
	xdp_dns_parseVariables
}

func (o *xdp_dns_parseObjects) Close() error {
	return _Xdp_dns_parseClose(
		&o.xdp_dns_parsePrograms,
		&o.xdp_dns_parseMaps,
	)
}

// xdp_dns_parseMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadXdp_dns_parseObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_dns_parseMaps struct {
	DnsA_cache *ebpf.Map `ebpf:"dns_a_cache"`
	Events     *ebpf.Map `ebpf:"events"`
	IpTtl      *ebpf.Map `ebpf:"ip_ttl"`
}

func (m *xdp_dns_parseMaps) Close() error {
	return _Xdp_dns_parseClose(
		m.DnsA_cache,
		m.Events,
		m.IpTtl,
	)
}

// xdp_dns_parseVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadXdp_dns_parseObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_dns_parseVariables struct {
	*ebpf.Variable `ebpf:"_"`
}

// xdp_dns_parsePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadXdp_dns_parseObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_dns_parsePrograms struct {
	XdpParseDnsA *ebpf.Program `ebpf:"xdp_parse_dns_a"`
}

func (p *xdp_dns_parsePrograms) Close() error {
	return _Xdp_dns_parseClose(
		p.XdpParseDnsA,
	)
}

func _Xdp_dns_parseClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xdp_dns_parse_bpfeb.o
var _Xdp_dns_parseBytes []byte
