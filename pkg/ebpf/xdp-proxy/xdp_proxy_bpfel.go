// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64 || wasm

package xdp_proxy

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type xdp_proxyConntrackEntry struct {
	_    structs.HostLayout
	Ip   uint32
	Port uint16
	Mac  [6]uint8
	Ttl  uint32
}

type xdp_proxyProxyRedirectConfig struct {
	_       structs.HostLayout
	Addr    uint32
	Port    uint32
	Ifindex uint16
	Mac     [6]uint8
}

// loadXdp_proxy returns the embedded CollectionSpec for xdp_proxy.
func loadXdp_proxy() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Xdp_proxyBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load xdp_proxy: %w", err)
	}

	return spec, err
}

// loadXdp_proxyObjects loads xdp_proxy and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*xdp_proxyObjects
//	*xdp_proxyPrograms
//	*xdp_proxyMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadXdp_proxyObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadXdp_proxy()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// xdp_proxySpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_proxySpecs struct {
	xdp_proxyProgramSpecs
	xdp_proxyMapSpecs
	xdp_proxyVariableSpecs
}

// xdp_proxyProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_proxyProgramSpecs struct {
	XdpLb *ebpf.ProgramSpec `ebpf:"xdp_lb"`
}

// xdp_proxyMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_proxyMapSpecs struct {
	ConnMap     *ebpf.MapSpec `ebpf:"conn_map"`
	IpTtl       *ebpf.MapSpec `ebpf:"ip_ttl"`
	RedirectMap *ebpf.MapSpec `ebpf:"redirect_map"`
}

// xdp_proxyVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_proxyVariableSpecs struct {
}

// xdp_proxyObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadXdp_proxyObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_proxyObjects struct {
	xdp_proxyPrograms
	xdp_proxyMaps
	xdp_proxyVariables
}

func (o *xdp_proxyObjects) Close() error {
	return _Xdp_proxyClose(
		&o.xdp_proxyPrograms,
		&o.xdp_proxyMaps,
	)
}

// xdp_proxyMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadXdp_proxyObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_proxyMaps struct {
	ConnMap     *ebpf.Map `ebpf:"conn_map"`
	IpTtl       *ebpf.Map `ebpf:"ip_ttl"`
	RedirectMap *ebpf.Map `ebpf:"redirect_map"`
}

func (m *xdp_proxyMaps) Close() error {
	return _Xdp_proxyClose(
		m.ConnMap,
		m.IpTtl,
		m.RedirectMap,
	)
}

// xdp_proxyVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadXdp_proxyObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_proxyVariables struct {
}

// xdp_proxyPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadXdp_proxyObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_proxyPrograms struct {
	XdpLb *ebpf.Program `ebpf:"xdp_lb"`
}

func (p *xdp_proxyPrograms) Close() error {
	return _Xdp_proxyClose(
		p.XdpLb,
	)
}

func _Xdp_proxyClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xdp_proxy_bpfel.o
var _Xdp_proxyBytes []byte
