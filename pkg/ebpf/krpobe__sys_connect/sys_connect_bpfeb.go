// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package sys_connect

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type sys_connectProxyRedirectConfig struct {
	_       structs.HostLayout
	Addr    uint32
	Port    uint16
	Ifindex uint16
	Mac     [6]uint8
	_       [2]byte
}

// loadSys_connect returns the embedded CollectionSpec for sys_connect.
func loadSys_connect() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Sys_connectBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load sys_connect: %w", err)
	}

	return spec, err
}

// loadSys_connectObjects loads sys_connect and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*sys_connectObjects
//	*sys_connectPrograms
//	*sys_connectMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSys_connectObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSys_connect()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// sys_connectSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sys_connectSpecs struct {
	sys_connectProgramSpecs
	sys_connectMapSpecs
	sys_connectVariableSpecs
}

// sys_connectProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sys_connectProgramSpecs struct {
	KprobeConnect *ebpf.ProgramSpec `ebpf:"kprobe_connect"`
}

// sys_connectMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sys_connectMapSpecs struct {
	IpTtl       *ebpf.MapSpec `ebpf:"ip_ttl"`
	RedirectMap *ebpf.MapSpec `ebpf:"redirect_map"`
}

// sys_connectVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sys_connectVariableSpecs struct {
}

// sys_connectObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSys_connectObjects or ebpf.CollectionSpec.LoadAndAssign.
type sys_connectObjects struct {
	sys_connectPrograms
	sys_connectMaps
	sys_connectVariables
}

func (o *sys_connectObjects) Close() error {
	return _Sys_connectClose(
		&o.sys_connectPrograms,
		&o.sys_connectMaps,
	)
}

// sys_connectMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSys_connectObjects or ebpf.CollectionSpec.LoadAndAssign.
type sys_connectMaps struct {
	IpTtl       *ebpf.Map `ebpf:"ip_ttl"`
	RedirectMap *ebpf.Map `ebpf:"redirect_map"`
}

func (m *sys_connectMaps) Close() error {
	return _Sys_connectClose(
		m.IpTtl,
		m.RedirectMap,
	)
}

// sys_connectVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadSys_connectObjects or ebpf.CollectionSpec.LoadAndAssign.
type sys_connectVariables struct {
}

// sys_connectPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSys_connectObjects or ebpf.CollectionSpec.LoadAndAssign.
type sys_connectPrograms struct {
	KprobeConnect *ebpf.Program `ebpf:"kprobe_connect"`
}

func (p *sys_connectPrograms) Close() error {
	return _Sys_connectClose(
		p.KprobeConnect,
	)
}

func _Sys_connectClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed sys_connect_bpfeb.o
var _Sys_connectBytes []byte
