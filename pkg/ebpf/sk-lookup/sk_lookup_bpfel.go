// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64 || wasm

package sk_lookup

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type sk_lookupProxyRedirectConfig struct {
	_       structs.HostLayout
	Addr    uint32
	Port    uint16
	Ifindex uint16
	Mac     [6]uint8
	_       [2]byte
}

// loadSk_lookup returns the embedded CollectionSpec for sk_lookup.
func loadSk_lookup() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Sk_lookupBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load sk_lookup: %w", err)
	}

	return spec, err
}

// loadSk_lookupObjects loads sk_lookup and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*sk_lookupObjects
//	*sk_lookupPrograms
//	*sk_lookupMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSk_lookupObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSk_lookup()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// sk_lookupSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sk_lookupSpecs struct {
	sk_lookupProgramSpecs
	sk_lookupMapSpecs
	sk_lookupVariableSpecs
}

// sk_lookupProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sk_lookupProgramSpecs struct {
	Tproxy *ebpf.ProgramSpec `ebpf:"tproxy"`
}

// sk_lookupMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sk_lookupMapSpecs struct {
	IpTtl       *ebpf.MapSpec `ebpf:"ip_ttl"`
	RedirectMap *ebpf.MapSpec `ebpf:"redirect_map"`
}

// sk_lookupVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sk_lookupVariableSpecs struct {
}

// sk_lookupObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSk_lookupObjects or ebpf.CollectionSpec.LoadAndAssign.
type sk_lookupObjects struct {
	sk_lookupPrograms
	sk_lookupMaps
	sk_lookupVariables
}

func (o *sk_lookupObjects) Close() error {
	return _Sk_lookupClose(
		&o.sk_lookupPrograms,
		&o.sk_lookupMaps,
	)
}

// sk_lookupMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSk_lookupObjects or ebpf.CollectionSpec.LoadAndAssign.
type sk_lookupMaps struct {
	IpTtl       *ebpf.Map `ebpf:"ip_ttl"`
	RedirectMap *ebpf.Map `ebpf:"redirect_map"`
}

func (m *sk_lookupMaps) Close() error {
	return _Sk_lookupClose(
		m.IpTtl,
		m.RedirectMap,
	)
}

// sk_lookupVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadSk_lookupObjects or ebpf.CollectionSpec.LoadAndAssign.
type sk_lookupVariables struct {
}

// sk_lookupPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSk_lookupObjects or ebpf.CollectionSpec.LoadAndAssign.
type sk_lookupPrograms struct {
	Tproxy *ebpf.Program `ebpf:"tproxy"`
}

func (p *sk_lookupPrograms) Close() error {
	return _Sk_lookupClose(
		p.Tproxy,
	)
}

func _Sk_lookupClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed sk_lookup_bpfel.o
var _Sk_lookupBytes []byte
